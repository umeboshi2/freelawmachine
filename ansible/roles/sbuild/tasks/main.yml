---
###################################################################
#
#  Base debian setup
#
####################################################################

# since we are using ansible-local and must initially
# login as "vagrant," that user cannot obtain the sbuild group
# permissions on the initial playbook run.  Therefore, another
# user needs to be created to build packages on the initial run
# of the playbook.
# https://stackoverflow.com/a/44753457/1869821
# Answer discusses meta: reset_connection which will
# not work in this peculiar situation.
- name: check that sbuild build user is not vagrant
  debug:
    msg: "Build user is {{ sbuild_user }}"
  failed_when: sbuild_user ==  'vagrant'

# Install the packages first, so that the sbuild group will be
# properly created.
- name: install schroot packages
  apt:
    state: latest
    update_cache: yes
    cache_valid_time: 3600
    autoremove: yes
    pkg:
      - schroot
      - debootstrap
      - git-buildpackage
      - ccache
      - libeatmydata1
      - sbuild

# By default, debian/ubuntu creates a group named after the user
# for each added user.
- name: setup build user's main group
  group:
    name: "{{ sbuild_user }}"
    state: present
    
- name: setup sbuild user
  user:
    name: "{{ sbuild_user }}"
    state: present
    group: sbuild
    append: yes
    home: "/home/{{ sbuild_user }}"
    comment: "{{ sbuild_user_gecos | default('Vagrant Builder') }}"
    shell: /bin/bash
    groups:
      - "{{ sbuild_user }}"
      - sbuild
    
- name: add sbuild user and vagrant to sbuild group
  user:
    name: "{{ item }}"
    groups: sbuild
    append: true
  with_items:
    - "{{ sbuild_user }}"
    - vagrant
    
- name: add .sbuildrc for sbuild users
  #become_user: "{{ sbuild_user }}"
  become_user: "{{ item }}"
  template:
    src: sbuildrc
    dest: ~/.sbuildrc
  with_items:
    - "{{ sbuild_user }}"
    - vagrant

- name: import source repos
  import_tasks: source-repos.yml

- name: create logs directory
  become_user: "{{ sbuild_user }}"
  file:
    state: directory
    path: "{{ build_log_dir }}"
    
- name: setup schroot_roots_directory
  file:
    path: "{{ schroot_roots_directory }}"
    state: directory

- name: configure schroot default copyfiles
  template:
    src: schroot-default-copyfiles
    dest: /etc/schroot/default/copyfiles
  when: use_apt_cache

- name: modify schroot mount script for vagrant
  template:
    src: 10mount
    dest: /etc/schroot/setup.d/10mount
    
- name: use apt proxy in sbuild chroot
  lineinfile:
    dest: /etc/schroot/sbuild/copyfiles
    line: /etc/apt/apt.conf.d/000apt-cacher-ng-proxy
  when: use_apt_cache

- name: add bind mounts to sbuild chroot
  lineinfile:
    dest: /etc/schroot/sbuild/fstab
    line: "{{ item }}"
  with_items:
    - /home /home none rw,bind 0 0
    - /vagrant /vagrant none rw,bind 0 0

- name: import setup chroot tasks
  include_tasks: setup-sbuild-chroot.yml
  vars:
    sbuild_distribution: "{{ sbuild_distribution }}"
    chroot_dir: "{{ schroot_roots_directory }}//{{ sbuild_distribution }}"
  loop: "{{ sbuild_distributions }}"
  loop_control:
    loop_var: sbuild_distribution

# FIXME: it would probably be better to register
# key id of generated/imported key and use it instead of this slop
- name: import local apt key
  become_user: "{{ reprepro_user }}"
  shell: gpg --export | sudo apt-key add -
  
- name: use local apt repository
  apt_repository:
    repo: deb file://{{ reprepro_base_directory }} {{ reprepro_dist_codename }} {{ reprepro_dist_components }}
    state: present
    filename: local.list
    update_cache: true
      
  
- name: setup buildstuff script
  template:
    src: build-stuff.py
    dest: /usr/local/bin/build-stuff
    mode: 0755
    
